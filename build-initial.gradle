/**
 * 
 * Thoughtfully generated by synapticloop gradle-project-init with the templar
 * templating language.
 */

/**
 * We want to ensure that we are using maven local to be able to publish the
 * plugin to the local repository.  This means that you will only need to 
 * invoke this file once, and then you will have a version to be able to be 
 * picked up for later use
 */
buildscript {
	repositories {
		mavenLocal()
	}
}

// list all of the plugins for this project
plugins {
	id 'java'
	id 'eclipse'
	id 'maven'
	id 'maven-publish'
}

// textual information for this project
group = 'synapticloop'
archivesBaseName = 'javaSample'
description = """An example gradle plugin"""

version = '1.0.0'

sourceCompatibility = 1.7
targetCompatibility = 1.7


// all of the repositories that this project will use
repositories {
	mavenLocal()
	mavenCentral()
	jcenter()
}

// now for all of the dependencies - at this point we only need the gradle
// APIs, but you will need to include any dependencies here
dependencies {
	compile gradleApi()
}

// we always want to fail on version conflict
configurations.all {
	resolutionStrategy {
		failOnVersionConflict()
	}
}

def locateJar(lib) {
	configurations.runtime.findAll {it.getName().contains(lib)}.collect { it.isDirectory() ? it : zipTree(it) }
}

task fatJar(type: Jar) {
	classifier = 'all'

	from(sourceSets.main.output) { include "**" }
}

build.finalizedBy(project.tasks.fatJar)

def javaApiUrl = 'http://docs.oracle.com/javase/1.7.0/docs/api/'
def groovyApiUrl = 'http://groovy.codehaus.org/gapi/'

tasks.withType(Javadoc) {
	options.links(javaApiUrl, groovyApiUrl)
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from 'build/docs/javadoc'
}

task sourcesJar(type: Jar) {
	from sourceSets.main.allSource
	classifier = 'sources'
}

// this publishes the built jar to the local repository
publishing {
	publications {
		Synapticloop(MavenPublication) {
			from components.java
			artifact sourcesJar
			artifact javadocJar

			groupId group
			artifactId archivesBaseName

			pom.withXml {
				configurations.compile.resolvedConfiguration.firstLevelModuleDependencies.each { dep ->
					asNode().dependencies[0].dependency.find {
						it.artifactId[0].text() == dep.moduleName &&
								it.groupId[0].text() == dep.moduleGroup
					}.scope[0].value = 'compile'
				}
			}
		}
	}
}