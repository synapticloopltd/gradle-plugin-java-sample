/**
 * 
 * Thoughtfully generated by synapticloop gradle-project-init with the templar
 * templating language.
 */

buildscript {
	repositories {
		mavenLocal()
		maven {
			url "https://plugins.gradle.org/"
		}
	}

	dependencies {
		classpath 'synapticloop:gradle-plugin-java-sample:1.0.0'
	}
}

// list all of the plugins for this project
plugins {
	id 'java'
	id 'eclipse'
	id 'maven'
	id 'maven-publish'
	id 'com.gradle.plugin-publish' version '0.9.3'
	id 'co.riiid.gradle' version '0.4.2'
	id 'com.jfrog.bintray' version '1.6'
	id 'synapticloop.copyrightr' version '1.0.1'
	id 'synapticloop.documentr' version '2.5.1'
	id "com.github.ben-manes.versions" version "0.13.0"
}

apply plugin: 'synapticloop.gradle-plugin-java-sample'

// textual information for this project
group = 'synapticloop'
archivesBaseName = 'gradle-plugin-java-sample'
description = """An example gradle plugin"""

version = '1.0.0'

sourceCompatibility = 1.7
targetCompatibility = 1.7


// all of the repositories that this project will use
repositories {
	mavenLocal()
	mavenCentral()
	jcenter()
}

// now for all of the dependencies
dependencies {

	compile gradleApi()
}

// we always want to fail on version conflict
configurations.all {
	resolutionStrategy {
		failOnVersionConflict()
	}
}

copyrightr {
	dryRun = false

	copyrightHolder = "Synapticloop"

	includes = [ 
		"src/main/**/*.java",
		"LICENSE.txt"
	]

	onlyReplaceFirst = true

	yearSeparator = " - "
}

documentr {
	directory = '.'
	verbose = 'true'
	extension = 'md' // this is the default
//	extension = 'adoc' // perhaps you want asciidoc?
}

def locateJar(lib) {
	configurations.runtime.findAll {it.getName().contains(lib)}.collect { it.isDirectory() ? it : zipTree(it) }
}

task fatJar(type: Jar) {
	classifier = 'all'

	from(sourceSets.main.output) { include "**" }
}

build.finalizedBy(project.tasks.fatJar)
publishPlugins.finalizedBy(project.tasks.fatJar)

github {
	owner = group
	repo = archivesBaseName
	if(System.getenv('GITHUB_TOKEN')) {
		token = System.getenv('GITHUB_TOKEN')
	}
	tagName = version
	name = version
	assets = [
		'build/libs/' + archivesBaseName + '-' + version + '-all.jar',
		'build/libs/' + archivesBaseName + '-' + version + '.jar'
	]
}

def javaApiUrl = 'http://docs.oracle.com/javase/1.7.0/docs/api/'
def groovyApiUrl = 'http://groovy.codehaus.org/gapi/'

tasks.withType(Javadoc) {
	options.links(javaApiUrl, groovyApiUrl)
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from 'build/docs/javadoc'
}

task sourcesJar(type: Jar) {
	from sourceSets.main.allSource
	classifier = 'sources'
}

publishing {
	publications {
		Synapticloop(MavenPublication) {
			from components.java
			artifact sourcesJar
			artifact javadocJar

			groupId group
			artifactId archivesBaseName

			pom.withXml {
				configurations.compile.resolvedConfiguration.firstLevelModuleDependencies.each { dep ->
					asNode().dependencies[0].dependency.find {
						it.artifactId[0].text() == dep.moduleName &&
								it.groupId[0].text() == dep.moduleGroup
					}.scope[0].value = 'compile'
				}
			}
		}
	}
}

bintray {
	user = System.getenv('BINTRAY_USER')
	key = System.getenv('BINTRAY_PASSWORD')

	publications = [ 'Synapticloop' ]

	publish = true

	pkg {
		repo = 'maven'
		name = archivesBaseName
	}
}

pluginBundle {
	website = 'https://github.com/synapticloopltd/gradle-plugin-java-sample'
	vcsUrl = 'https://github.com/synapticloopltd/gradle-plugin-java-sample'
	description = 'A sample gradle plugin built with java'
	tags = [ 'sample' ]

	plugins {
		gradlePluginJava {
			id = 'synapticloop.gradle-plugin-java-sample'
			displayName = 'Synapticloop Gradle plugin in Java'
		}
	}
}

